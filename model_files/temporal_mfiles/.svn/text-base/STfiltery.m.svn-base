function mapy =  STfiltery(map,params)
%performs spatio temporal filtering as defined by params on the input
%frames
%
%Inputs:
%frames - input frames to be filtered
%params - parameter structure
%
%Outputs:
%newMap - filtered frames
%
%By Alexander Russell, Johns Hopkins University, 2010

yVel = params.target.yVel;
for i = 1:length(yVel)
    fprintf('Filter velocity %d of %d y direction: \n',i,length(yVel));
    %% Create Filters
    fprintf('Generating Filters....\n');
    [gy, gt] = STkernely(yVel(i),params);
    plotfiltsy;
    %% Blur input
    %Gaussian blur frames;
    fprintf('y Spatial filters only');
    numFrames = size(map,3);

    for f = 1:numFrames
        fprintf('.');
        mapge(:,:,f) = conv2(1,gy.e,squeeze(map(:,:,f)),'same');
        mapgo(:,:,f) = conv2(1,gy.o,squeeze(map(:,:,f)),'same');
    end

    fprintf('\n Spatio Temporal Filter (y)');

    for x = 1:size(map(:,:,1),2)
        mapy_teye = conv2(gy.e,gt.e,squeeze(map(:,x,:)),'same');
        mapy_toyo = conv2(gy.o,gt.o,squeeze(map(:,x,:)),'same');
        mapy_toye = conv2(gy.e,gt.o,squeeze(map(:,x,:)),'same');
        mapy_teyo = conv2(gy.o,gt.e,squeeze(map(:,x,:)),'same');

        mapy_re = mapy_teye+mapy_toyo;
        mapy_ro = mapy_teyo-mapy_toye;
        mapy_le = mapy_teye-mapy_toyo;
        mapy_lo = mapy_teyo+mapy_toye;
        mapy_r = sqrt(mapy_re.^2+mapy_ro.^2);
        mapy_l = sqrt(mapy_le.^2+mapy_lo.^2);
        ge =squeeze(mapge(:,x,:));
        go =squeeze(mapgo(:,x,:));
        ge((ge<1e-5)&(ge>-1e-5))=1e-6;
        go((go<1e-5)&(go>-1e-5))=1e-6;
        temp =  mapy_l - mapy_r;
        mapy(:,x,:,i) = temp./sqrt(1+ge.^2+go.^2);
    end
    fprintf('\n');
end