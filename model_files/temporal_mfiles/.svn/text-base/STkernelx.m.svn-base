function [gx gt] = STkernel(xVel,params)
%makes gabor based orientation selective filters
%
%Inputs:
%
%params(1) - w: spatial frequency parameter
%params(2) - theta: orientation
%params(3) - phi : spatial phase
%params(4) - x : 
%params(5) - y : odd amplitude
%
%Outputs:
%
%g - gabor filter mask

tgPrs = params.target;

%% Calculate Filter Sizes
% xVel = tgPrs.xVel;%*cosd(tgPrs.angle);

divSpatial = 2;
divTemporal = 2;
sizeXSpatial = 2*tgPrs.xSize+1;

if abs(xVel) > 0
      sizeXTemporal = 2*round(tgPrs.xSize/abs(xVel))+1;
else
    sizeXTemporal = 1;
end
   

x = -floor(sizeXSpatial/2):floor(sizeXSpatial/2);
t = -floor(sizeXTemporal/2):floor(sizeXTemporal/2);

lambdaX = sizeXSpatial*2/divSpatial;
lambdaT = (lambdaX)./abs(xVel);%1./abs(4*xVel);

sx = sizeXSpatial*2/(divSpatial*3);
st = sizeXTemporal*2/(divTemporal*3);

X = x;
T = t;

gx.o = 1./(sqrt(2*pi).*sx).*exp(-X.^2./(2.*sx.^2)).*sin(2.*pi.*X/lambdaX);
gx.o = gx.o-mean(gx.o);
gx.o = gx.o./sum(abs(gx.o));

gx.e = 1./(sqrt(2*pi).*sx).*exp(-X.^2./(2.*sx.^2)).*cos(2.*pi.*X/lambdaX);
gx.e = gx.e-mean(gx.e);
gx.e = gx.e./sum(abs(gx.e));

gt.o = 1./(sqrt(2*pi).*st).*exp(-T.^2./(2.*st.^2)).*sin(2.*pi.*T/lambdaT);
gt.o = gt.o-mean(gt.o);
gt.o = gt.o./sum(abs(gt.o));

gt.e = 1./(sqrt(2*pi).*st).*exp(-T.^2./(2.*st.^2)).*cos(2.*pi.*T/lambdaT);
gt.e = gt.e-mean(gt.e);
gt.e = gt.e./sum(abs(gt.e));
