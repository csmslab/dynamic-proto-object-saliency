function [map] = STfilter3Dconv(frames,params)
%filters frames with the 3D Gabor Spatial-Temporal filter built from the
%specificiations in the params structure. The filter is based off the work
%done by Heeger (1987)
%
%The direction of motion for the filters is
%
%               -dy/dt
%                 |
%         g3      |     g2
%                 |
%       -dx/dt----------- +dx/dt
%                 |
%         g4      |     g1
%                 |
%                +dy/dt
%
% g1 : (+dx/dt,+dy/dt)
% g2 : (+dx/dt,-dy/dt)
% g3 : (-dx/dt,-dy/dt)
% g4 : (-dx/dt,+dy/dt)
%
%The opponency channels are g1-g3 and g2-g4
%
%By Alexander Russell, Johns Hopkins University, 2011

%% Generate Filter Kernels

fprintf('Generating 3D gabor kernels. \n');
[g] = STkernel(params);
% frames = 1;
%% loop through all frames and convolve with all the filters
fprintf('Filtering frames with spatiotemporal filters...');
for l = 1:size(g,2)
    for s = 1:size(g(l).speed,2)
        for ori = 1:size(g(l).speed(s).ori,2)
            numFrames = size(frames,3);
            for f = 1:numFrames
                gx = fliplr(g(l).speed(s).ori(ori).gx);
                gy = fliplr(g(l).speed(s).ori(ori).gy);
                gt = fliplr(g(l).speed(s).ori(ori).gt);
                
                gto =[];
                gte =[];
                gto(1,1,:) = fliplr(gt.o);
                gte(1,1,:) = fliplr(gt.e);
                
                
                XeYe(:,:,f) = conv2(gx.e,gy.e,double(squeeze(frames(:,:,f))),'same');
                XeYo(:,:,f) = conv2(gx.e,gy.o,double(squeeze(frames(:,:,f))),'same');
                XoYe(:,:,f) = conv2(gx.o,gy.e,double(squeeze(frames(:,:,f))),'same');
                XoYo(:,:,f) = conv2(gx.o,gy.o,double(squeeze(frames(:,:,f))),'same');
            end
            XeYeTe = convn(XeYe,gte,'same');
            XeYeTo = convn(XeYe,gto,'same');
            XeYoTo = convn(XeYo,gto,'same');
            XeYoTe = convn(XeYo,gte,'same');
            
            XoYeTo = convn(XoYe,gto,'same');
            XoYoTe = convn(XoYo,gte,'same');
            XoYeTe = convn(XoYe,gte,'same');
            XoYoTo = convn(XoYo,gto,'same');
            
            map(l).speed(s).ori(ori).g1e = XeYeTe...
                - XoYoTe...
                + XoYeTo...
                + XeYoTo;
            
            map(l).speed(s).ori(ori).g1o = XoYeTe...
                + XoYoTo...
                + XeYoTe...
                - XeYeTo;
            
            map(l).speed(s).ori(ori).g3e = XeYeTe...
                - XoYoTe...
                - XoYeTo...
                - XeYoTo;
            
            map(l).speed(s).ori(ori).g3o = XoYeTe...
                - XoYoTo...
                + XeYoTe...
                + XeYeTo;
            
            map(l).speed(s).ori(ori).g2e = XeYeTe ...
                + XoYoTe ...
                + XoYeTo ...
                - XeYoTo;
            
            map(l).speed(s).ori(ori).g2o = -XoYeTe...
                +XoYoTo...
                +XeYoTe...
                +XeYeTo;
            
            map(l).speed(s).ori(ori).g4e = XeYeTe ...
                + XoYoTe...
                - XoYeTo...
                + XeYoTo;
            
            map(l).speed(s).ori(ori).g4o = -XoYeTe...
                - XoYoTo...
                + XeYoTe...
                - XeYeTo;
            
            map(l).speed(s).ori(ori).g1xye = XeYe-XoYo;
            map(l).speed(s).ori(ori).g1xyo = XeYo+XoYe;
            map(l).speed(s).ori(ori).g2xye = XeYe+XoYo;
            map(l).speed(s).ori(ori).g2xyo = XeYo-XoYe;
        end
    end
end
%% Guassian blur image

% 
% g1xye = XeYe-XoYo;
% g1xyo = XeYo+XoYe;
% g2xye = XeYe+XoYo;
% g2xyo = XeYo-XoYe;
% 
% g1 = (g1e.^2+g1o.^2)./(g1xye.^2+g1xyo.^2+1e-4);
% g2 = (g2e.^2+g2o.^2)./(g2xye.^2+g2xyo.^2+1e-4);
% g3 = (g3e.^2+g3o.^2)./(g1xye.^2+g1xyo.^2+1e-4);
% g4 = (g4e.^2+g4o.^2)./(g2xye.^2+g2xyo.^2+1e-4);
% % g1 = (g1e.^2+g1o.^2);
% % g2 = (g2e.^2+g2o.^2);
% % g3 = (g3e.^2+g3o.^2);
% % g4 = (g4e.^2+g4o.^2);
% 
% % fout = [g1 g2;g3 g4];
% fout = [g1-g3; g2-g4];
% fout(floor(size(fout,1)/2),:,:) = max(max(max(fout))+5);
% % fout(:,floor(size(fout,2)/2),:) = max(max(max(fout))+5);
% map = fout;



