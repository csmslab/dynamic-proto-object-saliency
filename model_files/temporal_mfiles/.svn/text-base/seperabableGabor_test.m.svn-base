% function GaborKernel(params)
%creates a 2D or 3D gabor kernel according to the parameters in params
%Default is 2D
%
%Inputs:
%
%params - parameter structure
%
%Outputs
%
%g - structure of filter components
%
%By Alexander Russell, Johns Hopkins University, 2011.
%
%This code is based off Heeger (1987).

twoD = 0;

sx  = 14;
sy = 14;
st = 14;
f = 5/(2*pi);
lambdaT =(2*f); %pixels per frame

size_x = 14;
size_y = 14;
size_t = 7;
lambdaX = (2*size_x);
lambdaY = (2*size_y);

x1 = -2*size_x:2*size_x;
y1 = -2*size_y:2*size_y;

t = -2*size_t:2*size_t;

theta = -45;

x = x1.*cosd(theta)-y1.*sind(theta);
y = x1.*sind(theta)+y1.*cosd(theta);


if twoD == 1    
    gx.e = exp(-x.^2/(2.*sx^2)).*cos(2*pi/lambdaX.*x);
    gy.e = exp(-y.^2/(2.*sy^2)).*cos(2*pi/lambdaY.*y);
    gt.e = exp(-t.^2/(2.*st^2)).*cos(2*pi/lambdaT.*t);
    gx.o = exp(-x.^2/(2.*sx^2)).*sin(2*pi/lambdaX.*x);
    gy.o = exp(-y.^2/(2.*sy^2)).*sin(2*pi/lambdaY.*y);
    gt.o = exp(-t.^2/(2.*st^2)).*sin(2*pi/lambdaT.*t);
    
    [Xe Ye] = meshgrid(gx.e,gy.e);
    [Xo Yo] = meshgrid(gx.o,gx.o);
    
    g1 = (Xe.*Ye-Xo.*Yo);
    close all
    figure;imagesc(g1);
else %3D  gabor filter
    gx.e = exp(-x.^2/(2.*sx^2)).*cos(2*pi/lambdaX.*x);
    gy.e = exp(-y.^2/(2.*sy^2)).*cos(2*pi/lambdaY.*y);
    gt.e = exp(-t.^2/(2.*st^2)).*cos(2*pi/lambdaT.*t);
    gx.o = exp(-x.^2/(2.*sx^2)).*sin(2*pi/lambdaX.*x);
    gy.o = exp(-y.^2/(2.*sy^2)).*sin(2*pi/lambdaY.*y);
    gt.o = exp(-t.^2/(2.*st^2)).*sin(2*pi/lambdaT.*t);
    
    [Xe Ye Te] = meshgrid(gx.e,gy.e,gt.e);
    [Xo Yo To] = meshgrid(gx.o,gy.o,gt.o);
    g1 = (Xe.*Ye.*Te-Te.*Xo.*Yo-To.*Xo.*Ye-To.*Xe.*Ye);
    [xind yind] = size(squeeze(g1(:,:,1)));
    gx = squeeze(g1(round(xind/2),:,:));
    gy = squeeze(g1(:,round(yind/2),:));
    close all
    figure;
    subplot(3,1,1)
    imagesc(squeeze(g1(:,:,1)));
    subplot(3,1,2)
    imagesc(gx);
    xlabel('t')
    ylabel('x')
    subplot(3,1,3);
    imagesc(gy);
    xlabel('t')
    ylabel('y')
end



