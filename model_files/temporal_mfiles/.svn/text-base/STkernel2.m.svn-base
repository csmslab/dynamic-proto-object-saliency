function [gx gy gt] = STkernel(params)
%makes gabor based orientation selective filters
%
%Inputs:
%
%params(1) - w: spatial frequency parameter
%params(2) - theta: orientation
%params(3) - phi : spatial phase
%params(4) - x : 
%params(5) - y : odd amplitude
%
%Outputs:
%
%g - gabor filter mask

tgPrs = params.target;

%% Calculate Filter Sizes
xVel = tgPrs.xVel;%*cosd(tgPrs.angle);
yVel = tgPrs.yVel;%*sind(tgPrs.angle);

divSpatial = 2;
divTemporal = 2;
sizeXSpatial = 2*tgPrs.xSize+1;
sizeYSpatial = 2*tgPrs.xSize+1;

if abs(xVel) > 0
      sizeXTemporal = 2*round(tgPrs.xSize/abs(xVel))+1;
%     sizeXTemporal = 2*abs(xVel);

else
    sizeXTemporal = 1;
end

if abs(yVel) > 0
    sizeYTemporal = 2*round(tgPrs.ySize/abs(yVel))+1;
else
    sizeYTemporal = 1;
end
    

x = -floor(sizeXSpatial/2):floor(sizeXSpatial/2);
y = -floor(sizeYSpatial/2):floor(sizeYSpatial/2);
% t = -floor(sizeXSpatial/2):floor(sizeXSpatial/2);
t = -floor(sizeXTemporal/2):floor(sizeXTemporal/2);
% t = x;
 lambdaX = sizeXSpatial*2/divSpatial;

lambdaY = sizeYSpatial*2/divSpatial;
% lambdaT = sizeXTemporal*2/divTemporal;
% lambdaT = abs(xVel)./(lambdaX);%1./abs(4*xVel);
lambdaT = (lambdaX)./abs(xVel);%1./abs(4*xVel);
% lambdaT = 1./abs(4*xVel);
sx = sizeXSpatial*2/(divSpatial*3);
sy = sizeYSpatial*2/(divSpatial*3);
st = sizeXTemporal*2/(divTemporal*3);
% dx = 1/4;
% dy = 1/4;
% dz = 1/4;
% x = -1:.1:1;
% y = -1:.1:1;
% t = -1:.1:1;

X = x;
Y = y;
T = t;
% [X,T] = meshgrid(x,t);
% [Y,T] = meshgrid(y,t);
% sx = sigma;
% st = sigma;
% % wx0 = 2;
% % wt0 = 1;
% sy = sigma;
% wy0 = 3;


gx.o = 1./(sqrt(2*pi).*sx).*exp(-X.^2./(2.*sx.^2)).*sin(2.*pi.*X/lambdaX);
gx.o = gx.o-mean(gx.o);
gx.o = gx.o./sum(abs(gx.o));

gx.e = 1./(sqrt(2*pi).*sx).*exp(-X.^2./(2.*sx.^2)).*cos(2.*pi.*X/lambdaX);
gx.e = gx.e-mean(gx.e);
gx.e = gx.e./sum(abs(gx.e));

gy.o = 1./(sqrt(2*pi).*sy).*exp(-Y.^2./(2.*sx.^2)).*sin(2.*pi.*Y/lambdaY);
gy.o = gy.o-mean(gy.o);
gy.o = gy.o./sum(abs(gy.o));

gy.e = 1./(sqrt(2*pi).*sy).*exp(-Y.^2./(2.*sx.^2)).*cos(2.*pi.*Y/lambdaY);
gy.e = gy.e-mean(gy.e);
gy.e = gy.e./sum(abs(gy.e));

gt.o = 1./(sqrt(2*pi).*st).*exp(-T.^2./(2.*st.^2)).*sin(2.*pi.*T/lambdaT);
gt.o = gt.o-mean(gt.o);
gt.o = gt.o./sum(abs(gt.o));

gt.e = 1./(sqrt(2*pi).*st).*exp(-T.^2./(2.*st.^2)).*cos(2.*pi.*T/lambdaT);
gt.e = gt.e-mean(gt.e);
gt.e = gt.e./sum(abs(gt.e));
% 
% 
% gx.o = 1./(sqrt(2*pi).*sx).*exp(-X.^2./(2.*sx.^2)).*sin(2.*pi.*wx0.*X);
% gx.o = gx.o-mean(gx.o);
% gx.o = gx.o./sum(abs(gx.o.^2));
% 
% gx.e = 1./(sqrt(2*pi).*sx).*exp(-X.^2./(2.*sx.^2)).*cos(2.*pi.*wx0.*X);
% gx.e = gx.e-mean(gx.e);
% gx.e = gx.e./sum(abs(gx.e.^2));
% 
% gy.o = 1./(sqrt(2*pi).*sy).*exp(-Y.^2./(2.*sx.^2)).*sin(2.*pi.*wy0.*Y);
% gy.o = gy.o-mean(gy.o);
% gy.o = gy.o./sum(abs(gy.o.^2));
% 
% gy.e = 1./(sqrt(2*pi).*sy).*exp(-Y.^2./(2.*sx.^2)).*cos(2.*pi.*wy0.*Y);
% gy.e = gy.e-mean(gy.e);
% gy.e = gy.e./sum(abs(gy.e.^2));
% 
% gt.o = 1./(sqrt(2*pi).*st).*exp(-T.^2./(2.*st.^2)).*sin(2.*pi.*wt0.*T);
% gt.o = gt.o-mean(gt.o);
% gt.o = gt.o./sum(abs(gt.o.^2));
% 
% gt.e = 1./(sqrt(2*pi).*st).*exp(-T.^2./(2.*st.^2)).*cos(2.*pi.*wt0.*T);
% gt.e = gt.e-mean(gt.e);
% gt.e = gt.e./sum(abs(gt.e.^2));
% 
